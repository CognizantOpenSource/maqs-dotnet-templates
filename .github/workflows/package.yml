name: Package

on:
  push:
    branches: 
      - master
      - TroyWalshProf-patch-1
    
  pull_request:
    branches: [ master ]
    
  workflow_dispatch:
    inputs:
      override:
        description: 'Version Number'     
        required: true
        default: '0.0.0'
      tags:
        description: 'Manual'  

jobs:

  getVersion:
    name: Get package version
    runs-on: ubuntu-latest 
    outputs:
      buildNumber: ${{ steps.ver.outputs.BUILD_NUMBER }}
    
    steps: 
    - name: GetVersion
      id: ver
      shell: pwsh
      run: |
            if ("${{github.event.inputs.override}}")
            {
              Write-Host "override"
              $version = "${{ github.event.inputs.override}}"
            }
            else
            {
              $endPoint = "https://api.github.com/repos/magenic/MAQS/releases/latest"
              $info = Invoke-RestMethod -Uri $endPoint
              $version = $info.name.Trim("v")
            }
            
            Write-Host "::set-output name=BUILD_NUMBER::$($version)"
            Write-Host $version

  build:
    name: Build Templates
    runs-on: windows-latest 
    needs: getVersion
    env:
      Solution_Name: Extensions\OpenSourceExtension.sln

    steps:
    - name: Checkout
      uses: actions/checkout@v2
 
    - name: CreateNuGetTemplate
      run: nuget.exe pack .\Extensions\CoreTemplates\QATBaseTemplate.nuspec -NonInteractive -OutputDirectory "${{github.workspace}}/artifact/NuGet/" -Properties Configuration=release -Symbols -version ${{needs.getVersion.outputs.buildNumber}} -Verbosity Detailed
      shell: pwsh
      
    - uses: actions/upload-artifact@v2
      if: always()
      name: "Upload artifacts"
      with:
        name: nuget
        path: |
          artifact/NuGet/*.*

    # Install the .NET Core workload
    - name: Install .NET Core
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 5.0.x

    # Add the template data to the template zip files
    - uses: actions/checkout@v1
    - name: Run zip
      run: ./TemplateZip.ps1
      shell: pwsh

    # Add  MSBuild to the PATH: https://github.com/microsoft/setup-msbuild
    - name: Setup MSBuild.exe
      uses: microsoft/setup-msbuild@v1.0.2

    - name: SetVersion
      id: setVer
      shell: pwsh
      run: |
            Get-ChildItem *.vsixmanifest -recurse | foreach { 
            $FullPath =  [System.IO.Path]::GetFullPath($_)
            Write-Host $FullPath
            [xml]$content = Get-Content $FullPath
            $content.PackageManifest.Metadata.Identity.Version
            $content.PackageManifest.Metadata.Identity.Version = "${{ needs.getVersion.outputs.buildNumber }}"
            $content.PackageManifest.Metadata.Identity.Version
            $content.Save($FullPath)
            }

    # Create the app package by building and packaging the Windows Application Packaging project
    - name: Create the VSIX package
      run: msbuild $env:Solution_Name /p:Configuration=release /p:OutputPath="${{github.workspace}}/artifact/VSIX/" 

    - uses: actions/upload-artifact@v2
      if: always()
      name: "Upload artifacts"
      with:
        name: vsix
        path: |
          artifact/VSIX/*.*
       
  test:
    name: Test Core Templates
    runs-on: ubuntu-latest
    needs: [getVersion, build]
    steps:
      - uses: actions/checkout@v2
      
      - name: GetUpdatedBrowser
        run: |
          sudo apt-get update
          Write-Host "Installing/Updating Chrome"
          sudo apt-get --only-upgrade install google-chrome-stable
        shell: pwsh
      
      - uses: actions/download-artifact@v2
        with:
          name: 'nuget'
          path: ${{ github.workspace }}/nuget

      - name: Run Core Tests
        shell: pwsh
        run: |
              dotnet new -i "${{github.workspace}}/nuget/Magenic.Maqs.Templates.${{ needs.getVersion.outputs.buildNumber }}.nupkg"
              mkdir Results
              mkdir Appium
              cd Appium
              dotnet new Maqs.Appium
              dotnet test --logger trx --results-directory "${{github.workspace}}/Results/"
              cd ..
              mkdir Base
              cd Base
              dotnet new Maqs.Base
              dotnet test --logger trx --results-directory "${{github.workspace}}/Results/"
              cd ..
              mkdir Composite
              cd Composite
              dotnet new Maqs.Composite
              dotnet test --logger trx --results-directory '${{github.workspace}}/Results/' -- 'TestRunParameters.Parameter(name=\"SeleniumMaqs:Browser\",value=\"HeadlessChrome\")' 
              cd ..
              mkdir Database
              cd Database
              dotnet new Maqs.Database
              dotnet test --logger trx --results-directory "${{github.workspace}}/Results/"
              cd ..
              mkdir Email
              cd Email
              dotnet new Maqs.Email
              dotnet test --logger trx --results-directory "${{github.workspace}}/Results/"
              cd ..
              mkdir Selenium
              cd Selenium
              dotnet new Maqs.Selenium
              dotnet test --logger trx --results-directory '${{github.workspace}}/Results/' -- 'TestRunParameters.Parameter(name=\"SeleniumMaqs:Browser\",value=\"HeadlessChrome\")' 
              cd ..
              mkdir Webservice
              cd Webservice
              dotnet new Maqs.Webservice
              dotnet test --logger trx --results-directory "${{github.workspace}}/Results/"
              
      - name: Test Report
        uses: dorny/test-reporter@v1
        with:
          name: ReportResults
          path: ${{ github.workspace }}/Results/**/*.trx    # Path to test results
          reporter: dotnet-trx

  deployToGitHub:
    needs: test
    runs-on: windows-latest
    environment: github
    steps:
      - uses: actions/download-artifact@v2
        with:
          name: 'nuget'
          path: ${{ github.workspace }}/nuget
      - name: PLACEHOLDER
        run: |
          Write-Host "PLACEHOLDER"
        shell: pwsh
        

  deployToMarketplace:
    needs: test
    runs-on: windows-latest
    environment: marketplace
    steps:
      - uses: actions/download-artifact@v2
        with:
          name: 'vsix'
          path: ${{ github.workspace }}/vsix
      - name: PLACEHOLDER
        run: |
          Write-Host "PLACEHOLDER"
        shell: pwsh

    # Upload the MSIX package: https://github.com/marketplace/actions/upload-artifact
    #- name: Upload build artifacts
    #  uses: actions/upload-artifact@v2
    #  with:
    #    name: MSIX Package
    #    path: ${{ env.Wap_Project_Directory }}\AppPackages
